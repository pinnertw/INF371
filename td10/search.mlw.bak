module Binary_search

  use import int.Int
  use import int.ComputerDivision
  use import ref.Ref
  use import array.Array

  exception Break int

  let binary_search (a: array int) (v: int)
    =
    requires {forall i: int. 0 <= i < length a -> 
    (forall j: int. 0 <= j < length a -> 
    (i <= j -> a[i] <= a[j]))}
    ensures {(result >= 0 -> a[result] = v) /\
    (result = -1 -> (forall i: int. 0 <= i < length a -> a[i] <> v)) /\
    length a > result >= -1}
    let l = ref 0 in
    let u = ref (length a - 1) in
    try
      while !l <= !u do
        variant {!u - !l}
        invariant {!u >= -1 /\ !l >= 0 /\ !u < length a /\ !l < length a + 1 /\
        forall i: int. 0 <= i < !l -> a[i] <> v (*/\ 
        forall i: int. !u < i < length a -> a[i] <> v*)}
        (**)
        let m = div (!l + !u) 2 in
        (*ensures { 0 <= m < length a}*)
        if a[m] < v then l := m + 1
        else if a[m] > v then u := m - 1
        else raise (Break m)
      done;
      -1
    with Break m ->
      m
    end

end
